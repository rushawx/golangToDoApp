basePath: /
definitions:
  auth.LoginRequest:
    properties:
      code:
        type: string
      session_id:
        type: string
    required:
    - code
    - session_id
    type: object
  auth.LoginResponse:
    properties:
      token:
        type: string
    type: object
  auth.RegisterRequest:
    properties:
      phone:
        type: string
    required:
    - phone
    type: object
  auth.RegisterResponse:
    properties:
      message:
        type: string
    type: object
  auth.SessionRequest:
    properties:
      phone:
        type: string
    required:
    - phone
    type: object
  auth.SessionResponse:
    properties:
      session_id:
        type: string
    type: object
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  todo.Task:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      description:
        type: string
      done:
        type: boolean
      id:
        type: integer
      task_id:
        type: string
      title:
        type: string
      todo:
        type: string
      updatedAt:
        type: string
    type: object
  todo.TaskCreateRequest:
    properties:
      description:
        type: string
      title:
        type: string
      todo:
        type: string
    required:
    - description
    - title
    - todo
    type: object
  todo.TaskUpdateRequest:
    properties:
      description:
        type: string
      done:
        type: boolean
      title:
        type: string
      todo:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample ToDo server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: ToDo API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticates a user using session ID and code, and returns a JWT
        token
      parameters:
      - description: Login Request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/auth.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.LoginResponse'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Login a user
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Registers a user using their phone number
      parameters:
      - description: Register Request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/auth.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.RegisterResponse'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: Register a user
      tags:
      - Auth
  /auth/session:
    post:
      consumes:
      - application/json
      description: Generates a session ID for the given phone number
      parameters:
      - description: Session Request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/auth.SessionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.SessionResponse'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: Create a session
      tags:
      - Auth
  /tasks:
    get:
      description: Get all tasks
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/todo.Task'
            type: array
      summary: Get all tasks
      tags:
      - tasks
    post:
      consumes:
      - application/json
      description: Create a new task with the input payload
      parameters:
      - description: Task to create
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/todo.TaskCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/todo.Task'
        "400":
          description: Invalid input
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Create a new task
      tags:
      - tasks
  /tasks/{id}:
    delete:
      description: Delete a task by ID
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "404":
          description: Task not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Delete a task by ID
      tags:
      - tasks
    get:
      description: Get a task by ID
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/todo.Task'
        "404":
          description: Task not found
          schema:
            type: string
      summary: Get a task by ID
      tags:
      - tasks
    put:
      consumes:
      - application/json
      description: Update a task by ID
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      - description: Task to update
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/todo.TaskUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/todo.Task'
        "400":
          description: Invalid input
          schema:
            type: string
        "404":
          description: Task not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Update a task by ID
      tags:
      - tasks
swagger: "2.0"
